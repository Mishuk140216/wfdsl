{
    "functions": [
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"GetWorkflows",
           "internal":"get_workflow_ids",
           "desc": "Gets the ids of all workflows.",
           "returns": "string[]",
           "example":"GetWorkflows()",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"GetWorkflowInfo",
           "internal":"get_workflow_info",
           "desc": "Gets the properties of a workflow.",
           "returns": "json",
           "example":"GetWorkflowInfo(workflow_id)",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"RunWorkflow",
           "internal":"run_workflow",
           "desc": "Runs a workflow by id.",
           "returns": "string[]",
           "example":"RunWorkflow(workflow_id)",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"GetLibraries",
           "internal":"get_library_ids",
           "desc": "Gets the ids of all libraries.",
           "returns": "string[]",
           "example":"GetLibraries()",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"GetLibraryInfo",
           "internal":"get_library_info",
           "desc": "Gets the properties of a library.",
           "returns": "string[]",
           "example":"GetLibraryInfo(library_id)",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"GetHistories",
           "internal":"get_history_ids",
           "desc": "Gets the ids of all histories.",
           "returns": "string[]",
           "example":"GetHistories()",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"GetHistoryInfo",
           "internal":"get_history_info",
           "desc": "Gets the properties of a history.",
           "returns": "json",
           "example":"GetHistoryInfo(history_id)",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Analysis",
           "name":"GetTools",
           "internal":"get_tool_ids",
           "desc": "Get ids of the available tools. Multiple ids will be returned for multiple tools of same name.",
           "returns": "string[]",
           "example":"GetTools()",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Analysis",
           "name":"GetToolInfo",
           "internal":"get_tool_info",
           "desc": "Gets the properties of a tool.",
           "returns": "json",
           "example":"GetToolInfo(workflow_id)",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Analysis",
           "name":"GetToolNames",
           "internal":"get_tool_names",
           "desc": "Get names of the available tools.",
           "returns": "string[]",
           "example":"GetToolNames()",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Analysis",
           "name":"ToolIDToName",
           "internal":"tool_id_to_name",
           "desc": "Gets the name of a tool from id.",
           "returns": "string",
           "example":"ToolIDToName(tool_id)",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Analysis",
           "name":"ToolNameToID",
           "internal":"tool_name_to_ids",
           "desc": "Gets the ids of a tool from name. It may return multiple ids if multiple tools with same name are installed. Use GetToolInfo to select the right one.",
           "returns": "string[]",
           "example":"ToolNameToID(tool_name)",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "0",
           "group": "Workflow",
           "name":"CreateHistory",
           "internal":"create_history",
           "desc": "Create a new history.",
           "returns": "string",
           "example":"CreateHistory('New History')",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"HistoryIDToName",
           "internal":"history_id_to_name",
           "desc": "Gets the name of a history from id.",
           "returns": "string",
           "example":"HistoryIDToName(history_id)",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"HistoryNameToIDs",
           "internal":"history_name_to_ids",
           "desc": "Gets the ids of history name.",
           "returns": "string[]",
           "example":"HistoryNameToIDs(history_id)",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"GetHistoryDatasets",
           "internal":"get_history_datasets",
           "desc": "Gets the ids of datasets in a history.",
           "returns": "string[]",
           "example":"GetHistoryDatasets([history_id], [dataset_name])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"GetToolParams",
           "internal":"get_tool_params",
           "desc": "Get tool parameters.",
           "returns": "json",
           "example":"GetToolParams(['input'])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"Upload",
           "internal":"upload",
           "desc": "Uploads a file to a history or a library. If no history or library is given, the most recent history is taken.",
           "returns": "string",
           "example":"dataset_id = Upload(ftp_or_http_or_path_to_file, [history_id/library_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"Download",
           "internal":"download",
           "desc": "Download a dataset to file.",
           "returns": "string",
           "example":"filepath = Download(data_id)",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"RunTool",
           "internal":"run_tool",
           "desc": "Runs a tool on history.",
           "returns": "string",
           "example":"result = RunTool(history_id, tool_id, {params})",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"GetLastHistory",
           "internal":"get_most_recent_history",
           "desc": "Gets the id of the history which is last used.",
           "returns": "string",
           "example":"history_id = GetLastHistory()",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"DatasetIDToName",
           "internal":"dataset_id_to_name",
           "desc": "Gets the name of a dataset from id.",
           "returns": "string",
           "example":"dataset_name = DatasetIDToName(dataset_id, [hda_or_ldda])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"DatasetNameToIDs",
           "internal":"dataset_name_to_ids",
           "desc": "Gets the ids of a dataset from name. ",
           "returns": "string[]",
           "example":"dataset_ids = DatasetNameToIDs(dataset_name, [history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Quality",
           "level": 0,
           "name":"Groom",
           "internal":"run_fastq_groomer",
           "desc": "Runs the fastq groomer tool. If history_id not given, a new history is created.",
           "returns": "string",
           "example":"groomed_data = Groom([data], [hda = history_data_id], [ldda = library_data_id], [history_id = history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Alignment",
           "level": 0,
           "name":"BWAlign",
           "internal":"run_bwa",
           "desc": "Map with BWA. mapping low-divergent sequences against a large reference genome, such as the human genome and is designed for Illumina sequence reads up to 100bp.",
           "returns": "string",
           "example":"aligned_data = BWAlign(ref, data1, [data2], [history_id=history_id], [datatype='fastq/bam'])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Text",
           "level": 0,
           "name":"Cut",
           "internal":"run_cut",
           "desc": "Selects (cuts out) specified columns from the dataset. The output of this tool is always in tabular format (e.g., if your original delimiters are commas, they will be replaced with tabs).",
           "returns": "string",
           "example":"cut_data = Cut(data, [columns='c1,c2'], [delimeter='Tab/Whitespace/Comma/Dot/Dash/_/|'], [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Text",
           "level": 0,
           "name":"Trim",
           "internal":"run_trim",
           "desc": "Trims specified number of characters from a dataset or its field (if dataset is tab-delimited).",
           "returns": "string",
           "example":"trimmed_data = Trim(data, [col=0], [start=1], [end=0], [ignore='>@+<*-=|?$.:&%^#'], [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Analysis",
           "level": 0,
           "name":"Join",
           "internal":"run_join",
           "desc": "Joins lines of two datasets on a common field. Columns are referenced with a number. If your data is not TAB delimited, use Text Manipulation->Convert",
           "returns": "string",
           "example":"joined_data = Join(data1=, data2=, [field1=1], [field2=1], [col=0], [start=1], [end=0], [ignore='>@+<*-=|?$.:&%^#'], [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Analysis",
           "level": 0,
           "name":"Group",
           "internal":"run_group",
           "desc": "Allows to group the input dataset by a particular column and perform aggregate functions: Mean, Median, Mode, Sum, Max, Min, Count, Concatenate, and Randomly pick on any column(s). If your data is not TAB delimited, use Text Manipulation->Convert",
           "returns": "string",
           "example":"grouped_data = Group(data1=, [groupcol=1], [op1='optype,opcol,opround', ...], [ignorecase=True/False], ignorelines=['>@+<*-=|?$.:&%^#'], [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Analysis",
           "level": 0,
           "name":"Sort",
           "internal":"run_sort",
           "desc": "Sorts the dataset on any number of columns in either ascending or descending order. Sort type - Numerical, general numeric, alphabetical. If the data is not TAB delimited, use Text Manipulation->Convert",
           "returns": "string",
           "example":"sorted_data = Sort(data1=, col='col|style|order', [col1='col|style|order',...]field1=, field2=, [col=0], [start=1], [end=0], [ignore='>@+<*-=|?$.:&%^#'], [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Text",
           "level": 0,
           "name":"SelectFirst",
           "internal":"run_selectfirst",
           "desc": "Outputs specified number of lines from the beginning of a dataset.",
           "returns": "string",
           "example":"joined_data = Join(data1=, data2=, field1=, field2=, [col=0], [start=1], [end=0], [ignore='>@+<*-=|?$.:&%^#'], [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Analysis",
           "level": 0,
           "name":"Compare",
           "internal":"run_compare",
           "desc": "Outputs specified number of lines from the beginning of a dataset.",
           "returns": "string",
           "example":"joined_data = Join(data1=, data2=, field1=, field2=, [col=0], [start=1], [end=0], [ignore='>@+<*-=|?$.:&%^#'], [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Analysis",
           "level": 0,
           "name":"Unique",
           "internal":"run_fastuniq",
           "desc": "Removes duplicates in paired short DNA sequence reads in FASTQ format. It identifies duplicates by comparing sequences between read pairs and does not require complete genome sequences as prerequisites. It is also capable of simultaneously handling reads with different lengths and results in highly efficient running time.",
           "returns": "string",
           "example":"unique_data = Unique(data1=, data2=, [format=q/f], [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Analysis",
           "level": 0,
           "name":"Clip",
           "internal":"run_clip_adapter",
           "desc": "Clips adapter sequences. Renumbers sequence headers. Filters sequences on their size. Filters sequences containing unknown nucleotides (optional).",
           "returns": "string",
           "example":"clipped_data = Clip(data=, [min=], [max=], [format=q/f], [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Text",
           "level": 0,
           "name":"TrimAdaptive",
           "internal":"run_sickle",
           "desc": "Uses sliding windows along with quality and length thresholds to determine when quality is sufficiently low to trim the 3'-end of reads and also determines when the quality is sufficiently high enough to trim the 5'-end of reads. It will also discard reads based upon the length threshold.",
           "returns": "string",
           "example":"trimmed_data = TrimAdaptive(data1=, [data2=], [mode=se/pe/pe-combo], [quality=], [length=], [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Quality",
           "level": 0,
           "name":"CheckQuality",
           "internal":"run_fastqc",
           "desc": "Provide a simple way to do some quality control checks on raw sequence data coming from high throughput sequencing pipelines.",
           "returns": "string",
           "example":"checked_data = CheckQuality(data1=, [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Analysis",
           "level": 0,
           "name":"Filter",
           "internal":"run_filter",
           "desc": "Allows to restrict the dataset using simple conditional statements. Columns are referenced with c and a number (e.g. c1). Data must be tabular.",
           "returns": "string",
           "example":"filtered_data = Filter(data1=, condition=, [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Convert",
           "level": 0,
           "name":"ToTabular",
           "internal":"run_convert_to_tab",
           "desc": "Converts all delimiters of a specified type into TABs. Consecutive delimiters can be condensed in a single TAB.",
           "returns": "string",
           "example":"tabular_data = ToTabular(data1=, [delimeter='Tab Whitespace , . - _ |'], [history_id=history_id])",
           "runmode": "dist"
       }
   ]
}